---
import DashboardLayout from "../../../layouts/DashboardLayout.astro";
import Screen from "./_components/screen";
import { UserRole } from "@/lib/utils/auth";
import { serverApiService, type ApiResponse } from "@/lib/utils/api";
import { CONSTANTS, ROUTES } from "@/lib/utils/constants";

// Check if user has permission (middleware already authenticated)
const currentUser = Astro.locals.user;
if (!currentUser || (currentUser.role !== UserRole.SUPER_ADMIN && currentUser.role !== UserRole.HOTEL_ADMIN)) {
  return Astro.redirect('/admin/dashboard');
}

// Get effective hotel ID for filtering
const effectiveHotelId = currentUser.role === UserRole.HOTEL_ADMIN ? currentUser.hotelId : null;

// Fetch hotels for super admin
let hotels: any[] = [];
if (currentUser.role === UserRole.SUPER_ADMIN) {
  const hotelsResponse: ApiResponse<any> = await serverApiService.get(
    ROUTES.GET_ALL_HOTELS_ROUTE,
    Astro.cookies.get(CONSTANTS.ACCESS_TOKEN_KEY)?.value || "",
    Astro.cookies
  );
  hotels = hotelsResponse.success 
    ? hotelsResponse.data.map((hotel: any) => ({ id: hotel.id, name: hotel.name }))
    : [];
}

// Fetch rooms based on user role
let rooms: any[] = [];
if (effectiveHotelId) {
  // Hotel admin - fetch rooms for their hotel
  const roomsResponse: ApiResponse<any> = await serverApiService.get(
    `${ROUTES.GET_ROOMS_BY_HOTEL_ROUTE}?hotelId=${effectiveHotelId}`,
    Astro.cookies.get(CONSTANTS.ACCESS_TOKEN_KEY)?.value || "",
    Astro.cookies
  );
  rooms = roomsResponse.success ? roomsResponse.data.rooms : [];
} else {
  // Super admin - fetch all rooms
  const roomsResponse: ApiResponse<any> = await serverApiService.get(
    ROUTES.GET_ALL_ROOMS_ROUTE,
    Astro.cookies.get(CONSTANTS.ACCESS_TOKEN_KEY)?.value || "",
    Astro.cookies
  );
  rooms = roomsResponse.success ? roomsResponse.data.rooms : [];
}

// Fetch room types for filtering
const roomTypesResponse: ApiResponse<any> = await serverApiService.get(
  ROUTES.GET_ROOM_TYPES_ROUTE,
  Astro.cookies.get(CONSTANTS.ACCESS_TOKEN_KEY)?.value || "",
  Astro.cookies
);

const roomTypes = roomTypesResponse.success ? roomTypesResponse.data : [];
---

<DashboardLayout title="Rooms">
  <Screen 
    rooms={rooms} 
    hotels={hotels} 
    roomTypes={roomTypes}
    currentUser={currentUser}
    client:load 
  />
</DashboardLayout>