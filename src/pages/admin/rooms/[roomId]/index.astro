---
import DashboardLayout from "../../../../layouts/DashboardLayout.astro";
import RoomForm from "./_components/RoomForm";
import { UserRole } from "@/lib/utils/auth";
import { serverApiService, type ApiResponse } from "@/lib/utils/api";
import { CONSTANTS, ROUTES } from "@/lib/utils/constants";

const { roomId } = Astro.params;

// Check if user has permission (middleware already authenticated)
const currentUser = Astro.locals.user;
if (!currentUser || (currentUser.role !== UserRole.SUPER_ADMIN && currentUser.role !== UserRole.HOTEL_ADMIN)) {
  return Astro.redirect('/admin/dashboard');
}

let roomData: any = null;
if (roomId && roomId !== "new") {
  // Fetch specific room data
  const roomResponse: ApiResponse<any> = await serverApiService.get(
    ROUTES.GET_ROOM_BY_ID_ROUTE(roomId),
    Astro.cookies.get(CONSTANTS.ACCESS_TOKEN_KEY)?.value || "",
    Astro.cookies
  );
  roomData = roomResponse.success ? roomResponse.data.room : null;
}

// Fetch hotels for dropdown (only for super admin)
let hotels: any[] = [];
if (currentUser.role === UserRole.SUPER_ADMIN) {
  const hotelsResponse: ApiResponse<any> = await serverApiService.get(
    ROUTES.GET_ALL_HOTELS_ROUTE,
    Astro.cookies.get(CONSTANTS.ACCESS_TOKEN_KEY)?.value || "",
    Astro.cookies
  );
  hotels = hotelsResponse.success 
    ? hotelsResponse.data.map((hotel: any) => ({ id: hotel.id, name: hotel.name }))
    : [];
}

// Fetch room types
const roomTypesResponse: ApiResponse<any> = await serverApiService.get(
  ROUTES.GET_ROOM_TYPES_ROUTE,
  Astro.cookies.get(CONSTANTS.ACCESS_TOKEN_KEY)?.value || "",
  Astro.cookies
);

const roomTypes = roomTypesResponse.success 
  ? roomTypesResponse.data.map((rt: any) => ({ id: rt.id, name: rt.name }))
  : [];
---

<DashboardLayout title="Room Management">
  <RoomForm 
    roomData={roomData} 
    hotels={hotels} 
    roomTypes={roomTypes}
    currentUser={currentUser}
    client:load 
  />
</DashboardLayout>