---
import DashboardLayout from "@/layouts/DashboardLayout.astro";
import PageContainer from "@/components/PageContainer";
import { Heading } from "@/components/Heading";
import { serverApiService, type ApiResponse } from "@/lib/utils/api";
import { CONSTANTS, ROUTES } from "@/lib/utils/constants";
import ViewAsAdmin from "./_components/ViewAsAdmin";
import { UserRole, isSuperAdmin } from "@/lib/utils/auth";

const { pageTitle } = Astro.props;
const { pathname } = Astro.url;

// User is already authenticated by middleware
const currentUser = Astro.locals.user;

console.log('currentUser in dashboard is ',currentUser)
// Determine current tab based on pathname and user role
let currentTab = "Overview";
if (isSuperAdmin(currentUser)) {
  if (pathname === "/admin/dashboard/cities") {
    currentTab = "Cities";
  } else if (pathname === "/admin/dashboard/hotels") {
    currentTab = "Hotels";
  }
}


const fromTime = Astro.url.searchParams.get("fromTime") || "";
const toTime = Astro.url.searchParams.get("toTime") || "";

let fromDate = new Date(fromTime).toLocaleDateString();
let toDate = new Date(toTime).toLocaleDateString();

// Fetch hotels for ViewAsAdmin component (only for super admin)
let hotels: any[] = [];
if (isSuperAdmin(currentUser)) {
  const hotelsResponse: ApiResponse<any> = await serverApiService.get(
    ROUTES.GET_ALL_HOTELS_ROUTE,
    Astro.cookies.get(CONSTANTS.ACCESS_TOKEN_KEY)?.value || "",
    Astro.cookies
  );
  hotels = hotelsResponse.success ? hotelsResponse.data : [];
}

// Build dashboard tabs based on user role
const dashboardTabs = [];
dashboardTabs.push({
  value: "Overview",
  action: "/admin/dashboard",
});

// Only super admin can see Cities and Hotels tabs
if (isSuperAdmin(currentUser)) {
  dashboardTabs.push(
    {
      value: "Cities", 
      action: "/admin/dashboard/cities",
    },
    {
      value: "Hotels",
      action: "/admin/dashboard/hotels", 
    }
  );
}

---

<DashboardLayout title={pageTitle}>
  <div class="p-4 md:px-8">
    <Heading
      title="Dashboard"
      description={isSuperAdmin(currentUser) 
        ? "Comprehensive analytics and management overview" 
        : "Your hotel analytics and performance metrics"
      }
    />
    <div class="space-y-4">
      <div class="flex justify-between items-center">
        <div class="flex items-center gap-4">
          {dashboardTabs.length > 1 && (
            <div class="flex space-x-1">
              {dashboardTabs.map(tab => (
                <a 
                  href={tab.action} 
                  class={`px-3 py-2 text-sm font-medium rounded-md ${
                    currentTab === tab.value 
                      ? 'bg-primary text-primary-foreground' 
                      : 'text-muted-foreground hover:text-foreground'
                  }`}
                >
                  {tab.value}
                </a>
              ))}
            </div>
          )}
        </div>
        <div class="flex items-center gap-4">
          {isSuperAdmin(currentUser) && (
            <ViewAsAdmin hotels={hotels} currentUser={currentUser} client:load />
          )}
        </div>
      </div>
    </div>
    <slot />
  </div>
</DashboardLayout>


---

<DashboardLayout title={pageTitle}>
  <div class="p-4 md:px-8">
    <Heading
      title="Dashboard"
      description={isSuperAdmin(currentUser) 
        ? "Comprehensive analytics and management overview" 
        : "Your hotel analytics and performance metrics"
      }
    />
    <div class="space-y-4">
      <div class="flex justify-between items-center">
        <div class="flex items-center gap-4">
          {dashboardTabs.length > 1 && (
            <div class="flex space-x-1">
              {dashboardTabs.map(tab => (
                <a 
                  href={tab.action} 
                  class={`px-3 py-2 text-sm font-medium rounded-md ${
                    currentTab === tab.value 
                      ? 'bg-primary text-primary-foreground' 
                      : 'text-muted-foreground hover:text-foreground'
                  }`}
                >
                  {tab.value}
                </a>
              ))}
            </div>
          )}
        </div>
        <div class="flex items-center gap-4">
          {isSuperAdmin(currentUser) && (
            <ViewAsAdmin hotels={hotels} currentUser={currentUser} client:load />
          )}
        </div>
      </div>
    </div>
    <slot />
  </div>
</DashboardLayout>


