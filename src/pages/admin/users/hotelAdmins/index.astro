---
import { serverApiService, type ApiResponse } from "@/lib/utils/api";
import DashboardLayout from "../_layout.astro";
import Screen from "./_components/screen";
import { CONSTANTS, ROUTES } from "@/lib/utils/constants";
import { UserRole } from "@/lib/utils/auth";
import { use } from "react";

// Check if user has permission (middleware already authenticated)
const currentUser = Astro.locals.user;
if (!currentUser || currentUser.role !== UserRole.SUPER_ADMIN) {
  return Astro.redirect("/admin/dashboard");
}

const page = Astro.url.searchParams.get("page") || 1;
const limit = Astro.url.searchParams.get("limit") || 10;

interface userSchema {
  id: string;
  name: string;
  phone: string;
  role: string;
  firebaseUid: string;
  createdAt: string;
}

const customers: ApiResponse<{
  users: userSchema[];
  total: number;
  page: number;
  limit: number;
}> = await serverApiService.get(
  ROUTES.GET_ALL_USERS_ROUTE("hotel", Number(page), Number(limit)),
  Astro.cookies.get(CONSTANTS.ACCESS_TOKEN_KEY)?.value || "",
  Astro.cookies,
);

console.log("hotels here ", JSON.stringify(customers.data));

const hotelAdmins = [
  ...customers.data.users.map((user) => ({
    id: user.id,
    name: user.name,
    status: user.status,
    createdAt: user.createdAt,
    updatedAt: user.updatedAt,
    phone:user.phone,
    hotelId: user.hotelId || null
  })),
];
---

<DashboardLayout pageTitle="Hotels">
  <Screen hotelAdmins={hotelAdmins} client:load />
</DashboardLayout>
