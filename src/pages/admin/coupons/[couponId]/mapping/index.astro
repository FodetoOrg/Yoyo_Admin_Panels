---
import DashboardLayout from "../../../../../layouts/DashboardLayout.astro";
import MappingScreen from "./_components/MappingScreen";
import { UserRole } from "@/lib/utils/auth";
import { serverApiService, type ApiResponse } from "@/lib/utils/api";
import { CONSTANTS, ROUTES } from "@/lib/utils/constants";

// Check if user has permission (middleware already authenticated)
const currentUser = Astro.locals.user;
if (!currentUser || (currentUser.role !== UserRole.SUPER_ADMIN && currentUser.role !== UserRole.HOTEL_ADMIN)) {
  return Astro.redirect('/admin/dashboard');
}

const { couponId } = Astro.params;

if (!couponId || couponId === "new") {
  return Astro.redirect('/admin/coupons');
}

// Fetch coupon data
const couponResponse: ApiResponse<any> = await serverApiService.get(
  ROUTES.GET_COUPON_ROUTE(couponId),
  Astro.cookies.get(CONSTANTS.ACCESS_TOKEN_KEY)?.value || "",
  Astro.cookies
);

if (!couponResponse.success) {
  return Astro.redirect('/admin/coupons');
}

const coupon = couponResponse.data;

// Fetch cities, hotels, and room types for mappings
const citiesResponse: ApiResponse<any> = await serverApiService.get(
  ROUTES.GET_CITIES_ROUTE,
  Astro.cookies.get(CONSTANTS.ACCESS_TOKEN_KEY)?.value || "",
  Astro.cookies
);

const hotelsResponse: ApiResponse<any> = await serverApiService.get(
  ROUTES.GET_ALL_HOTELS_ROUTE,
  Astro.cookies.get(CONSTANTS.ACCESS_TOKEN_KEY)?.value || "",
  Astro.cookies
);

const roomTypesResponse: ApiResponse<any> = await serverApiService.get(
  ROUTES.GET_ROOM_TYPES_ROUTE,
  Astro.cookies.get(CONSTANTS.ACCESS_TOKEN_KEY)?.value || "",
  Astro.cookies
);

const cities = citiesResponse.success ? citiesResponse.data : [];
const hotels = hotelsResponse.success ? hotelsResponse.data : [];
const roomTypes = roomTypesResponse.success ? roomTypesResponse.data : [];

// Extract existing mappings from coupon data
const existingMappings = {
  cities: coupon.mappings?.cities?.map((city: any) => city.id) || [],
  hotels: coupon.mappings?.hotels?.map((hotel: any) => hotel.id) || [],
  roomTypes: coupon.mappings?.roomTypes?.map((roomType: any) => roomType.id) || []
};
---

<DashboardLayout title="Coupon Mapping">
  <MappingScreen 
    couponId={couponId}
    couponCode={coupon.code}
    cities={cities}
    hotels={hotels}
    roomTypes={roomTypes}
    existingMappings={existingMappings}
    client:load 
  />