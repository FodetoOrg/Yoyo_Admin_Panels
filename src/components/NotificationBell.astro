---
// src/components/NotificationBell.astro
// Notification bell component with dropdown
---

<div class="notification-container" id="notification-container">
    <!-- Notification Bell Button -->
    <button
        class="notification-bell"
        id="notification-bell"
        aria-label="Notifications"
        onclick="toggleNotificationDropdown()"
    >
        <!-- Bell Icon (you can replace with your preferred icon) -->
        <svg
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
        >
            <path
                d="M12 2C13.1 2 14 2.9 14 4C14 4.78 13.64 5.47 13.1 5.85C15.15 7.2 16.5 9.43 16.5 12V16L18.5 18V19H5.5V18L7.5 16V12C7.5 9.43 8.85 7.2 10.9 5.85C10.36 5.47 10 4.78 10 4C10 2.9 10.9 2 12 2ZM10 20C10 21.1 10.9 22 12 22C13.1 22 14 21.1 14 20H10Z"
                fill="currentColor"></path>
        </svg>

        <!-- Notification Badge -->
        <span
            class="notification-badge"
            id="notification-badge"
            style="display: none;">0</span
        >

        <!-- Connection Status Indicator -->
        <span class="notification-status" id="notification-status"></span>
    </button>

    <!-- Notification Dropdown -->
    <div class="notification-dropdown" id="notification-dropdown">
        <!-- Header -->
        <div class="notification-dropdown-header">
            <h3 class="notification-dropdown-title">Notifications</h3>
            <button
                class="mark-all-read-btn"
                id="mark-all-read-btn"
                onclick="markAllNotificationsAsRead()"
            >
                Mark all read
            </button>
        </div>

        <!-- Notification List -->
        <div class="notification-list" id="notification-list">
            <!-- Empty state -->
            <div class="notification-empty" id="notification-empty">
                <div class="notification-empty-icon">ðŸ””</div>
                <div class="notification-empty-text">No notifications yet</div>
            </div>
        </div>

        <!-- Footer (optional) -->
        <div
            class="notification-dropdown-footer"
            style="padding: 12px 20px; border-top: 1px solid #f3f4f6; text-align: center;"
        >
            <a
                href="/notifications"
                class="view-all-link"
                style="color: #3b82f6; text-decoration: none; font-size: 13px; font-weight: 500;"
            >
                View all notifications
            </a>
        </div>
    </div>
</div>

<script>
    // Notification dropdown functionality
    let isDropdownOpen = false;

    function toggleNotificationDropdown() {
        const dropdown = document.getElementById("notification-dropdown");
        const bell = document.getElementById("notification-bell");

        isDropdownOpen = !isDropdownOpen;

        if (isDropdownOpen) {
            dropdown.classList.add("show");
            bell.classList.add("active");

            // Close dropdown when clicking outside
            setTimeout(() => {
                document.addEventListener("click", closeDropdownOnOutsideClick);
            }, 100);

            // Mark notifications as viewed (not read)
            if (window.notificationClient?.isReady()) {
                window.notificationClient.socket.send(
                    JSON.stringify({
                        type: "notifications_viewed",
                        timestamp: Date.now(),
                    }),
                );
            }
        } else {
            dropdown.classList.remove("show");
            bell.classList.remove("active");
            document.removeEventListener("click", closeDropdownOnOutsideClick);
        }
    }

    function closeDropdownOnOutsideClick(event) {
        const container = document.getElementById("notification-container");
        if (!container.contains(event.target)) {
            toggleNotificationDropdown();
        }
    }

    function markAllNotificationsAsRead() {
        if (window.notificationClient?.isReady()) {
            window.notificationClient.markAllAsRead();

            // Update UI immediately
            const notifications = document.querySelectorAll(
                ".notification-item.unread",
            );
            notifications.forEach((notification) => {
                notification.classList.remove("unread");
                notification.classList.add("read");

                // Hide mark as read button
                const markReadBtn =
                    notification.querySelector(".mark-read-btn");
                if (markReadBtn) {
                    markReadBtn.style.display = "none";
                }
            });

            // Update badge
            updateNotificationBadge(0);
        }
    }

    function updateNotificationBadge(count) {
        const badge = document.getElementById("notification-badge");
        const bell = document.getElementById("notification-bell");

        if (count > 0) {
            badge.textContent = count > 99 ? "99+" : count;
            badge.style.display = "inline-block";
            bell.classList.add("has-notifications");
        } else {
            badge.style.display = "none";
            bell.classList.remove("has-notifications");
        }
    }

    function updateNotificationList() {
        const list = document.getElementById("notification-list");
        const empty = document.getElementById("notification-empty");
        const notifications = list.querySelectorAll(".notification-item");

        if (notifications.length === 0) {
            empty.style.display = "block";
        } else {
            empty.style.display = "none";
        }
    }

    // Listen for notification events from the WebSocket client
    document.addEventListener("astro:notification", (event) => {
        const notification = event.detail;

        // Update empty state
        updateNotificationList();
    });

    // Update connection status
    document.addEventListener("astro:notification-connected", () => {
        const status = document.getElementById("notification-status");
        status.classList.add("connected");
        status.classList.remove("connecting");
    });

    document.addEventListener("astro:notification-disconnected", () => {
        const status = document.getElementById("notification-status");
        status.classList.remove("connected");
        status.classList.add("connecting");
    });

    // Initialize when component loads
    document.addEventListener("DOMContentLoaded", () => {
        updateNotificationList();

        // Set initial connection status
        const status = document.getElementById("notification-status");
        status.classList.add("connecting");

        // Request notification count when client is ready
        const checkClient = () => {
            if (window.notificationClient?.isReady()) {
                window.notificationClient.getNotificationCount();
            } else {
                setTimeout(checkClient, 100);
            }
        };
        checkClient();
    });

    // Handle page navigation with Astro
    document.addEventListener("astro:after-swap", () => {
        // Reset dropdown state after navigation
        isDropdownOpen = false;
        const dropdown = document.getElementById("notification-dropdown");
        const bell = document.getElementById("notification-bell");

        if (dropdown) dropdown.classList.remove("show");
        if (bell) bell.classList.remove("active");

        document.removeEventListener("click", closeDropdownOnOutsideClick);

        // Reinitialize
        updateNotificationList();
    });

    // Expose functions globally for onclick handlers
    window.toggleNotificationDropdown = toggleNotificationDropdown;
    window.markAllNotificationsAsRead = markAllNotificationsAsRead;
</script>

<style>
    .notification-container {
        position: relative;
        display: inline-block;
    }

    .notification-bell.active {
        background: rgba(59, 130, 246, 0.1);
        color: #3b82f6;
    }

    .view-all-link:hover {
        color: #2563eb;
        text-decoration: underline;
    }

    /* Hide scrollbar in notification list for cleaner look */
    .notification-list {
        scrollbar-width: thin;
        scrollbar-color: #cbd5e1 #f1f5f9;
    }

    /* Custom scrollbar for webkit browsers */
    .notification-list::-webkit-scrollbar {
        width: 6px;
    }

    .notification-list::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 3px;
    }

    .notification-list::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 3px;
    }

    .notification-list::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
    }
</style>
