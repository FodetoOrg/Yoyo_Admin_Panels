---
import "../styles/global.css";
import DashboardSidebar from "@/components/sidebar";
import { navItems } from "@/lib/utils/NavItems";
import { ClientRouter } from "astro:transitions";
import { SimpleNotificationBanner } from "@/components/notifications/SimpleNotificationBanner";

interface Props {
  title: string;
}

const { title = "admin" } = Astro.props;
const { pathname } = Astro.url;

// User is already authenticated by middleware
const currentUser = Astro.locals.user;

const allowedItems = navItems.filter((item) =>
  item.allowedRoles?.includes(currentUser.role),
);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Mulish:ital,wght@0,200..1000;1,200..1000&family=Outfit:wght@100..900&family=Rubik+Mono+One&family=Varela+Round&family=Yatra+One&display=swap"
      rel="stylesheet"
    />
    <ClientRouter />
    
    <!-- Add animation styles for notification banner -->
    <style>
      @keyframes gradient-x {
        0%, 100% {
          background-size: 200% 200%;
          background-position: left center;
        }
        50% {
          background-size: 200% 200%;
          background-position: right center;
        }
      }
      .animate-gradient-x {
        animation: gradient-x 15s ease infinite;
        background-size: 200% 200%;
      }
    </style>
  </head>
  <body>
    <!-- Loading Progress Bar -->
    <div id="loading-bar" class="loading-bar">
      <div class="loading-progress"></div>
    </div>

    <!-- Simple Notification Banner - Shows when notifications are blocked -->
    <SimpleNotificationBanner client:load />

    <DashboardSidebar
      client:load
      pathname={pathname}
      navItems={allowedItems}
      user={currentUser}
    >
      <slot />
    </DashboardSidebar>

    <!-- <Toaster client:load /> -->

    <script>
      // Loading bar functionality
      class LoadingBar {
        constructor() {
          this.bar = document.getElementById("loading-bar");
          this.progress = this.bar?.querySelector(".loading-progress");
          this.isLoading = false;
          this.currentProgress = 0;
          this.progressInterval = null;

          this.init();
        }

        init() {
          // Listen for Astro's view transition events
          document.addEventListener("astro:before-preparation", () => {
            this.start();
          });

          document.addEventListener("astro:after-swap", () => {
            this.complete();
          });

          // Fallback for regular navigation
          document.addEventListener("beforeunload", () => {
            this.start();
          });

          // Listen for link clicks
          document.addEventListener("click", (e) => {
            const link = e.target.closest("a");
            if (link && link.href && link.href !== window.location.href) {
              // Only show loader for internal links
              const isInternal = link.hostname === window.location.hostname;
              if (isInternal && !link.hasAttribute("download")) {
                this.start();
              }
            }
          });
        }

        start() {
          if (this.isLoading) return;
          
          this.isLoading = true;
          this.currentProgress = 0;
          
          if (this.bar) {
            this.bar.classList.add("active");
          }
          
          this.progressInterval = setInterval(() => {
            this.currentProgress += Math.random() * 15;
            
            if (this.currentProgress >= 90) {
              this.currentProgress = 90;
              clearInterval(this.progressInterval!);
            }
            
            if (this.progress) {
              this.progress.style.width = `${this.currentProgress}%`;
            }
          }, 100);
        }

        complete() {
          if (!this.isLoading) return;
          
          clearInterval(this.progressInterval!);
          
          if (this.progress) {
            this.progress.style.width = "100%";
          }
          
          setTimeout(() => {
            if (this.bar) {
              this.bar.classList.remove("active");
            }
            this.isLoading = false;
            this.currentProgress = 0;
            
            if (this.progress) {
              this.progress.style.width = "0%";
            }
          }, 200);
        }
      }

      // Initialize loading bar
      new LoadingBar();
    </script>
  </body>
</html>

<style is:global>
  :root {
    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );
  }

  html {
    font-family: "Outfit", serif;
  }

  * {
    margin: 0;
    box-sizing: border-box;
  }

  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }

  /* Loading Bar Styles */
  .loading-bar {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    z-index: 9999;
    opacity: 0;
    transition: opacity 0.2s ease;
    background: rgba(0, 0, 0, 0.1);
  }

  .loading-bar.active {
    opacity: 1;
  }

  .loading-progress {
    height: 100%;
    width: 0%;
    background: linear-gradient(
      90deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)),
      rgb(var(--accent))
    );
    background-size: 200% 100%;
    animation: shimmer 1s ease-in-out infinite;
    transition: width 0.2s ease;
    border-radius: 0 2px 2px 0;
    box-shadow: 0 0 10px rgba(var(--accent), 0.5);
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  /* Optional: Add a subtle glow effect */
  .loading-bar.active .loading-progress {
    box-shadow:
      0 0 10px rgba(var(--accent), 0.6),
      0 0 20px rgba(var(--accent), 0.3);
  }
</style>
